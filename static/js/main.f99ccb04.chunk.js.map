{"version":3,"sources":["ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoList","props","className","onClick","onSelect","id","text","App","useState","inputList","setInputList","Items","setItems","deleteItems","oldItems","filter","arrElem","index","type","placeholder","value","onChange","event","target","map","itemval","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAmBeA,EAhBE,SAACC,GACjB,OACC,oCACC,yBAAKC,UAAU,cACd,kBAAC,IAAD,CACCA,UAAU,OACVC,QAAS,WACRF,EAAMG,SAASH,EAAMI,OAGvB,4BAAKJ,EAAMK,SCmDAC,EA1DH,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBACVC,EADU,KACCC,EADD,OAESF,mBAAS,IAFlB,mBAEVG,EAFU,KAEHC,EAFG,KAeXC,EAAc,SAACR,GACpBO,GAAS,SAACE,GACT,OAAOA,EAASC,QAAO,SAACC,EAASC,GAChC,OAAOA,IAAUZ,SAKpB,OACC,oCACC,yBAAKH,UAAU,YACd,yBAAKA,UAAU,cACd,6BACA,yCACA,6BACA,2BACCA,UAAU,YACVgB,KAAK,OACLC,YAAY,YACZC,MAAOX,EACPY,SA/Ba,SAACC,GAClBZ,EAAaY,EAAMC,OAAOH,UAgCvB,4BAAQjB,QA7BQ,WACnBS,GAAS,SAACE,GACT,MAAM,GAAN,mBAAWA,GAAX,CAAqBL,OAEtBC,EAAa,KAyBoBR,UAAU,WAAxC,KAEA,4BAEES,EAAMa,KAAI,SAACC,EAASR,GACpB,OACC,kBAAC,EAAD,CACCX,KAAMmB,EACNC,IAAKT,EACLZ,GAAIY,EACJb,SAAUS,YCzCCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f99ccb04.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaTimes } from \"react-icons/fa\";\n\nconst ToDoList = (props) => {\n\treturn (\n\t\t<>\n\t\t\t<div className=\"todo_style\">\n\t\t\t\t<FaTimes\n\t\t\t\t\tclassName=\"font\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tprops.onSelect(props.id);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<li>{props.text}</li>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ToDoList;\n","import React, { useState } from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport \"./index.css\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { IconButton } from \"@material-ui/core\";\n\nconst App = () => {\n\tconst [inputList, setInputList] = useState(\"\");\n\tconst [Items, setItems] = useState([]);\n\n\tconst itemEvent = (event) => {\n\t\tsetInputList(event.target.value);\n\t};\n\n\tconst listOfItems = () => {\n\t\tsetItems((oldItems) => {\n\t\t\treturn [...oldItems, inputList];\n\t\t});\n\t\tsetInputList(\"\");\n\t};\n\n\tconst deleteItems = (id) => {\n\t\tsetItems((oldItems) => {\n\t\t\treturn oldItems.filter((arrElem, index) => {\n\t\t\t\treturn index !== id;\n\t\t\t});\n\t\t});\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"main_div\">\n\t\t\t\t<div className=\"center_div\">\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1>ToDo List</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"add_items\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Add Items\"\n\t\t\t\t\t\tvalue={inputList}\n\t\t\t\t\t\tonChange={itemEvent}\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={listOfItems} className='add_btn'>+</button>\n\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t{/* <li>{inputList} </li> */}\n\t\t\t\t\t\t{Items.map((itemval, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ToDoList\n\t\t\t\t\t\t\t\t\ttext={itemval}\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tid={index}\n\t\t\t\t\t\t\t\t\tonSelect={deleteItems}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ToDoList2 from \"./ToDoList2\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}